
sketch_feb26a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000046a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000414  00800200  00800200  0000046a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000046a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000049c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000004e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000115e  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e53  00000000  00000000  000016fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ee  00000000  00000000  00002551  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  00002b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b3  00000000  00000000  00002c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000180  00000000  00000000  000032fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000347b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	26 e0       	ldi	r18, 0x06	; 6
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a4 31       	cpi	r26, 0x14	; 20
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	6e d1       	rcall	.+732    	; 0x3e2 <main>
 106:	75 c1       	rjmp	.+746    	; 0x3f2 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <CSwitch>:
  */
CSwitch:
        /* 
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
 10a:	0f 92       	push	r0
 10c:	1f 92       	push	r1
 10e:	2f 92       	push	r2
 110:	3f 92       	push	r3
 112:	4f 92       	push	r4
 114:	5f 92       	push	r5
 116:	6f 92       	push	r6
 118:	7f 92       	push	r7
 11a:	8f 92       	push	r8
 11c:	9f 92       	push	r9
 11e:	af 92       	push	r10
 120:	bf 92       	push	r11
 122:	cf 92       	push	r12
 124:	df 92       	push	r13
 126:	ef 92       	push	r14
 128:	ff 92       	push	r15
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	2f 93       	push	r18
 130:	3f 93       	push	r19
 132:	4f 93       	push	r20
 134:	5f 93       	push	r21
 136:	6f 93       	push	r22
 138:	7f 93       	push	r23
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	af 93       	push	r26
 140:	bf 93       	push	r27
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
 14a:	fc b7       	in	r31, 0x3c	; 60
 14c:	ff 93       	push	r31
 14e:	0f b7       	in	r16, 0x3f	; 63
 150:	0f 93       	push	r16
        /* 
          * Now, we have saved the CurrentP's context.
          * Save the current H/W stack pointer into CurrentP->sp.
          */
        lds  r30, CurrentP
 152:	e0 91 12 06 	lds	r30, 0x0612	; 0x800612 <CurrentP>
        lds  r31, CurrentP+1   /* Z = (R31,R30) contains the "sp" */
 156:	f0 91 13 06 	lds	r31, 0x0613	; 0x800613 <CurrentP+0x1>
        in   r28, SPL
 15a:	cd b7       	in	r28, 0x3d	; 61
        in   r29, SPH
 15c:	de b7       	in	r29, 0x3e	; 62
        st   Z+, r28       /* store (R28=SPL,R29=SPH) indirectly via Z */
 15e:	c1 93       	st	Z+, r28
        st   Z+, r29       /* Now, CurrentP->sp = the current H/W stack pointer */
 160:	d1 93       	st	Z+, r29

00000162 <Exit_Kernel>:
       /*
         * Now, we should select a new "CurrentP".
         */
Exit_Kernel:
        call Dispatch
 162:	71 d0       	rcall	.+226    	; 0x246 <Dispatch>
        /*
          * We are now ready to restore a new CurrentP's context, i.e.,
          * switching the H/W stack pointer to this new CurrentP->sp.
          */ 
        lds  r30, CurrentP
 164:	e0 91 12 06 	lds	r30, 0x0612	; 0x800612 <CurrentP>
        lds  r31, CurrentP+1  /* Z = (R31,R30) contains the new "sp" */
 168:	f0 91 13 06 	lds	r31, 0x0613	; 0x800613 <CurrentP+0x1>
        ld   r28, Z+
 16c:	c1 91       	ld	r28, Z+
        ld   r29, Z+
 16e:	d1 91       	ld	r29, Z+
        out  SPL, r28
 170:	cd bf       	out	0x3d, r28	; 61
        out  SPH, r29   /* Now, H/W stack pointer = CurrentP->sp */
 172:	de bf       	out	0x3e, r29	; 62
        /*
          * We are now executing in our new CurrentP's stack.
          * Note: at the bottom of the CurrentP's context is its return address.
          */
        RESTORECTX
 174:	ff 91       	pop	r31
 176:	ff bf       	out	0x3f, r31	; 63
 178:	ff 91       	pop	r31
 17a:	fc bf       	out	0x3c, r31	; 60
 17c:	ff 91       	pop	r31
 17e:	ef 91       	pop	r30
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	bf 91       	pop	r27
 186:	af 91       	pop	r26
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	7f 91       	pop	r23
 18e:	6f 91       	pop	r22
 190:	5f 91       	pop	r21
 192:	4f 91       	pop	r20
 194:	3f 91       	pop	r19
 196:	2f 91       	pop	r18
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	ff 90       	pop	r15
 19e:	ef 90       	pop	r14
 1a0:	df 90       	pop	r13
 1a2:	cf 90       	pop	r12
 1a4:	bf 90       	pop	r11
 1a6:	af 90       	pop	r10
 1a8:	9f 90       	pop	r9
 1aa:	8f 90       	pop	r8
 1ac:	7f 90       	pop	r7
 1ae:	6f 90       	pop	r6
 1b0:	5f 90       	pop	r5
 1b2:	4f 90       	pop	r4
 1b4:	3f 90       	pop	r3
 1b6:	2f 90       	pop	r2
 1b8:	1f 90       	pop	r1
 1ba:	0f 90       	pop	r0
        ret    /* don't use rti to re-enable interrupts */
 1bc:	08 95       	ret

000001be <init_LED_D2>:
 * \date October 2006
 */

void init_LED_D2(void)
{
	DDRD |= LED_D2;		//Set LED to output (pins 4 and 5)
 1be:	8a b1       	in	r24, 0x0a	; 10
 1c0:	80 63       	ori	r24, 0x30	; 48
 1c2:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;		//Initialize port to LOW (turn off LEDs)
 1c4:	1b b8       	out	0x0b, r1	; 11
 1c6:	08 95       	ret

000001c8 <init_LED_D5>:
}

void init_LED_D5(void)
{
	DDRD |= LED_D5;		//Set LED to output (pins 6 and 7)
 1c8:	8a b1       	in	r24, 0x0a	; 10
 1ca:	80 6c       	ori	r24, 0xC0	; 192
 1cc:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;		//Initialize port to LOW (turn off LEDs)
 1ce:	1b b8       	out	0x0b, r1	; 11
 1d0:	08 95       	ret

000001d2 <enable_LED>:
}

void enable_LED(unsigned int mask)
{
	PORTD = mask;		//Initialize port to high
 1d2:	8b b9       	out	0x0b, r24	; 11
 1d4:	08 95       	ret

000001d6 <disable_LEDs>:
}

void disable_LEDs(void)
{
		PORTD = 0x00;	//Initialize port to high
 1d6:	1b b8       	out	0x0b, r1	; 11
 1d8:	08 95       	ret

000001da <Task_Terminate>:
/**
  * The calling task terminates itself.
  */
void Task_Terminate() 
{
   if (KernelActive) {
 1da:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <KernelActive>
 1de:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <KernelActive+0x1>
 1e2:	89 2b       	or	r24, r25
 1e4:	49 f0       	breq	.+18     	; 0x1f8 <Task_Terminate+0x1e>
      Disable_Interrupt();
 1e6:	f8 94       	cli
      CurrentP -> state = DEAD;
 1e8:	e0 91 12 06 	lds	r30, 0x0612	; 0x800612 <CurrentP>
 1ec:	f0 91 13 06 	lds	r31, 0x0613	; 0x800613 <CurrentP+0x1>
 1f0:	ee 5f       	subi	r30, 0xFE	; 254
 1f2:	fe 4f       	sbci	r31, 0xFE	; 254
 1f4:	10 82       	st	Z, r1
        /* we will NEVER return here! */
      asm ( "jmp Exit_Kernel":: );
 1f6:	b5 cf       	rjmp	.-150    	; 0x162 <Exit_Kernel>
 1f8:	08 95       	ret

000001fa <Kernel_Create_Task_At>:

   /*----BEGIN of NEW CODE----*/
   //Initialize the workspace (i.e., stack) and PD here!

   //Clear the contents of the workspace
   memset(&(p->workSpace),0,WORKSPACE);
 1fa:	fc 01       	movw	r30, r24
 1fc:	32 96       	adiw	r30, 0x02	; 2
 1fe:	20 e0       	ldi	r18, 0x00	; 0
 200:	31 e0       	ldi	r19, 0x01	; 1
 202:	df 01       	movw	r26, r30
 204:	a9 01       	movw	r20, r18
 206:	1d 92       	st	X+, r1
 208:	41 50       	subi	r20, 0x01	; 1
 20a:	50 40       	sbci	r21, 0x00	; 0
 20c:	e1 f7       	brne	.-8      	; 0x206 <Kernel_Create_Task_At+0xc>
   //by most significant).  This is because the "return" assembly instructions 
   //(rtn and rti) pop addresses off in BIG ENDIAN (most sig. first, least sig. 
   //second), even though the AT90 is LITTLE ENDIAN machine.

   //Store terminate at the bottom of stack to protect against stack underrun.
   *(unsigned char *)sp-- = ((unsigned int)Task_Terminate) & 0xff;
 20e:	e1 50       	subi	r30, 0x01	; 1
 210:	ff 4f       	sbci	r31, 0xFF	; 255
 212:	2d ee       	ldi	r18, 0xED	; 237
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	20 83       	st	Z, r18
   *(unsigned char *)sp-- = (((unsigned int)Task_Terminate) >> 8) & 0xff;
 218:	31 97       	sbiw	r30, 0x01	; 1
 21a:	30 83       	st	Z, r19

   //Place return address of function at bottom of stack
   *(unsigned char *)sp-- = ((unsigned int)f) & 0xff;
 21c:	31 97       	sbiw	r30, 0x01	; 1
 21e:	60 83       	st	Z, r22
   *(unsigned char *)sp-- = (((unsigned int)f) >> 8) & 0xff;
 220:	31 97       	sbiw	r30, 0x01	; 1
 222:	70 83       	st	Z, r23
 224:	20 e0       	ldi	r18, 0x00	; 0
#ifdef DEBUG
   //Fill stack with initial values for development debugging
   //Registers 0 -> 31 and the status register
   for (counter = 0; counter < 33; counter++)
   {
      *(unsigned char *)sp-- = counter;
 226:	22 93       	st	-Z, r18
 228:	2f 5f       	subi	r18, 0xFF	; 255
   *(unsigned char *)sp-- = (((unsigned int)f) >> 8) & 0xff;

#ifdef DEBUG
   //Fill stack with initial values for development debugging
   //Registers 0 -> 31 and the status register
   for (counter = 0; counter < 33; counter++)
 22a:	21 32       	cpi	r18, 0x21	; 33
 22c:	e1 f7       	brne	.-8      	; 0x226 <Kernel_Create_Task_At+0x2c>
 22e:	9c 01       	movw	r18, r24
 230:	24 52       	subi	r18, 0x24	; 36
 232:	3f 4f       	sbci	r19, 0xFF	; 255
#else
   //Place stack pointer at top of stack
   sp = sp - 33;
#endif
      
   p->sp = sp;		/* stack pointer into the "workSpace" */
 234:	dc 01       	movw	r26, r24
 236:	2d 93       	st	X+, r18
 238:	3c 93       	st	X, r19

   /*----END of NEW CODE----*/



   p->state = READY;
 23a:	fc 01       	movw	r30, r24
 23c:	ee 5f       	subi	r30, 0xFE	; 254
 23e:	fe 4f       	sbci	r31, 0xFE	; 254
 240:	21 e0       	ldi	r18, 0x01	; 1
 242:	20 83       	st	Z, r18
 244:	08 95       	ret

00000246 <Dispatch>:
void Dispatch()
{
     /* find the next READY task
       * Note: if there is no READY task, then this will loop forever!.
       */
   while(Process[NextP].state != READY) {
 246:	23 e0       	ldi	r18, 0x03	; 3
 248:	31 e0       	ldi	r19, 0x01	; 1
 24a:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <NextP>
 24e:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <NextP+0x1>
 252:	82 9f       	mul	r24, r18
 254:	f0 01       	movw	r30, r0
 256:	83 9f       	mul	r24, r19
 258:	f0 0d       	add	r31, r0
 25a:	92 9f       	mul	r25, r18
 25c:	f0 0d       	add	r31, r0
 25e:	11 24       	eor	r1, r1
 260:	e8 5f       	subi	r30, 0xF8	; 248
 262:	fc 4f       	sbci	r31, 0xFC	; 252
 264:	80 81       	ld	r24, Z
 266:	81 30       	cpi	r24, 0x01	; 1
 268:	61 f0       	breq	.+24     	; 0x282 <Dispatch+0x3c>
      NextP = (NextP + 1) % MAXPROCESS;
 26a:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <NextP>
 26e:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <NextP+0x1>
 272:	01 96       	adiw	r24, 0x01	; 1
 274:	83 70       	andi	r24, 0x03	; 3
 276:	99 27       	eor	r25, r25
 278:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <NextP+0x1>
 27c:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <NextP>
 280:	e4 cf       	rjmp	.-56     	; 0x24a <Dispatch+0x4>
   }

     /* we have a new CurrentP */
   CurrentP = &(Process[NextP]);
 282:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <NextP>
 286:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <NextP+0x1>
 28a:	23 e0       	ldi	r18, 0x03	; 3
 28c:	31 e0       	ldi	r19, 0x01	; 1
 28e:	42 9f       	mul	r20, r18
 290:	c0 01       	movw	r24, r0
 292:	43 9f       	mul	r20, r19
 294:	90 0d       	add	r25, r0
 296:	52 9f       	mul	r21, r18
 298:	90 0d       	add	r25, r0
 29a:	11 24       	eor	r1, r1
 29c:	8a 5f       	subi	r24, 0xFA	; 250
 29e:	9d 4f       	sbci	r25, 0xFD	; 253
 2a0:	90 93 13 06 	sts	0x0613, r25	; 0x800613 <CurrentP+0x1>
 2a4:	80 93 12 06 	sts	0x0612, r24	; 0x800612 <CurrentP>
   CurrentP->state = RUNNING;
 2a8:	fc 01       	movw	r30, r24
 2aa:	ee 5f       	subi	r30, 0xFE	; 254
 2ac:	fe 4f       	sbci	r31, 0xFE	; 254
 2ae:	22 e0       	ldi	r18, 0x02	; 2
 2b0:	20 83       	st	Z, r18
 
   //Moved to bottom (this was in the wrong place).
   NextP = (NextP + 1) % MAXPROCESS;
 2b2:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <NextP>
 2b6:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <NextP+0x1>
 2ba:	01 96       	adiw	r24, 0x01	; 1
 2bc:	83 70       	andi	r24, 0x03	; 3
 2be:	99 27       	eor	r25, r25
 2c0:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <NextP+0x1>
 2c4:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <NextP>
 2c8:	08 95       	ret

000002ca <OS_Init>:
  */
void OS_Init() 
{
   int x;

   Tasks = 0;
 2ca:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <_edata+0x1>
 2ce:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
   KernelActive = 0;
 2d2:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <KernelActive+0x1>
 2d6:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <KernelActive>
   NextP = 0;
 2da:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <NextP+0x1>
 2de:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <NextP>
 2e2:	e6 e0       	ldi	r30, 0x06	; 6
 2e4:	f2 e0       	ldi	r31, 0x02	; 2

   for (x = 0; x < MAXPROCESS; x++) {
      memset(&(Process[x]),0,sizeof(PD));
 2e6:	83 e0       	ldi	r24, 0x03	; 3
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	df 01       	movw	r26, r30
 2ec:	9c 01       	movw	r18, r24
 2ee:	1d 92       	st	X+, r1
 2f0:	21 50       	subi	r18, 0x01	; 1
 2f2:	30 40       	sbci	r19, 0x00	; 0
 2f4:	e1 f7       	brne	.-8      	; 0x2ee <OS_Init+0x24>
      Process[x].state = DEAD;
 2f6:	df 01       	movw	r26, r30
 2f8:	ae 5f       	subi	r26, 0xFE	; 254
 2fa:	be 4f       	sbci	r27, 0xFE	; 254
 2fc:	1c 92       	st	X, r1
 2fe:	ed 5f       	subi	r30, 0xFD	; 253
 300:	fe 4f       	sbci	r31, 0xFE	; 254

   Tasks = 0;
   KernelActive = 0;
   NextP = 0;

   for (x = 0; x < MAXPROCESS; x++) {
 302:	36 e0       	ldi	r19, 0x06	; 6
 304:	e2 31       	cpi	r30, 0x12	; 18
 306:	f3 07       	cpc	r31, r19
 308:	81 f7       	brne	.-32     	; 0x2ea <OS_Init+0x20>
      memset(&(Process[x]),0,sizeof(PD));
      Process[x].state = DEAD;
   }
}
 30a:	08 95       	ret

0000030c <OS_Start>:
/**
  * This function starts the RTOS after creating a few tasks.
  */
void OS_Start() 
{   
   if ( (! KernelActive) && (Tasks > 0)) {
 30c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <KernelActive>
 310:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <KernelActive+0x1>
 314:	89 2b       	or	r24, r25
 316:	71 f4       	brne	.+28     	; 0x334 <OS_Start+0x28>
 318:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 31c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_edata+0x1>
 320:	89 2b       	or	r24, r25
 322:	41 f0       	breq	.+16     	; 0x334 <OS_Start+0x28>
      Disable_Interrupt();
 324:	f8 94       	cli

      /* here we go...  */
      KernelActive = 1;
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <KernelActive+0x1>
 32e:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <KernelActive>
      asm ( "jmp Exit_Kernel":: );
 332:	17 cf       	rjmp	.-466    	; 0x162 <Exit_Kernel>
 334:	08 95       	ret

00000336 <Task_Create>:
  * each task gives up its share of the processor voluntarily by calling
  * Task_Next().
  */
void Task_Create( voidfuncptr f)
{
   Disable_Interrupt();
 336:	f8 94       	cli
  */
static void Kernel_Create_Task( voidfuncptr f ) 
{
   int x;

   if (Tasks == MAXPROCESS) return;  /* Too many task! */
 338:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <_edata>
 33c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <_edata+0x1>
 340:	24 30       	cpi	r18, 0x04	; 4
 342:	31 05       	cpc	r19, r1
 344:	21 f1       	breq	.+72     	; 0x38e <Task_Create+0x58>
 346:	e8 e0       	ldi	r30, 0x08	; 8
 348:	f3 e0       	ldi	r31, 0x03	; 3
 34a:	20 e0       	ldi	r18, 0x00	; 0
 34c:	30 e0       	ldi	r19, 0x00	; 0

   /* find a DEAD PD that we can use  */
   for (x = 0; x < MAXPROCESS; x++) {
       if (Process[x].state == DEAD) break;
 34e:	40 81       	ld	r20, Z
 350:	44 23       	and	r20, r20
 352:	39 f0       	breq	.+14     	; 0x362 <Task_Create+0x2c>
   int x;

   if (Tasks == MAXPROCESS) return;  /* Too many task! */

   /* find a DEAD PD that we can use  */
   for (x = 0; x < MAXPROCESS; x++) {
 354:	2f 5f       	subi	r18, 0xFF	; 255
 356:	3f 4f       	sbci	r19, 0xFF	; 255
 358:	ed 5f       	subi	r30, 0xFD	; 253
 35a:	fe 4f       	sbci	r31, 0xFE	; 254
 35c:	24 30       	cpi	r18, 0x04	; 4
 35e:	31 05       	cpc	r19, r1
 360:	b1 f7       	brne	.-20     	; 0x34e <Task_Create+0x18>
 362:	bc 01       	movw	r22, r24
       if (Process[x].state == DEAD) break;
   }

   ++Tasks;
 364:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 368:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_edata+0x1>
 36c:	01 96       	adiw	r24, 0x01	; 1
 36e:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <_edata+0x1>
 372:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
   Kernel_Create_Task_At( &(Process[x]), f );
 376:	43 e0       	ldi	r20, 0x03	; 3
 378:	51 e0       	ldi	r21, 0x01	; 1
 37a:	24 9f       	mul	r18, r20
 37c:	c0 01       	movw	r24, r0
 37e:	25 9f       	mul	r18, r21
 380:	90 0d       	add	r25, r0
 382:	34 9f       	mul	r19, r20
 384:	90 0d       	add	r25, r0
 386:	11 24       	eor	r1, r1
 388:	8a 5f       	subi	r24, 0xFA	; 250
 38a:	9d 4f       	sbci	r25, 0xFD	; 253
 38c:	36 df       	rcall	.-404    	; 0x1fa <Kernel_Create_Task_At>
  */
void Task_Create( voidfuncptr f)
{
   Disable_Interrupt();
   Kernel_Create_Task( f );
   Enable_Interrupt();
 38e:	78 94       	sei
 390:	08 95       	ret

00000392 <Task_Next>:
/**
  * The calling task gives up its share of the processor voluntarily.
  */
void Task_Next() 
{
   if (KernelActive) {
 392:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <KernelActive>
 396:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <KernelActive+0x1>
 39a:	89 2b       	or	r24, r25
 39c:	59 f0       	breq	.+22     	; 0x3b4 <Task_Next+0x22>
     Disable_Interrupt();
 39e:	f8 94       	cli
     CurrentP ->state = READY;
 3a0:	e0 91 12 06 	lds	r30, 0x0612	; 0x800612 <CurrentP>
 3a4:	f0 91 13 06 	lds	r31, 0x0613	; 0x800613 <CurrentP+0x1>
 3a8:	ee 5f       	subi	r30, 0xFE	; 254
 3aa:	fe 4f       	sbci	r31, 0xFE	; 254
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	80 83       	st	Z, r24
     CSwitch();
 3b0:	ac de       	rcall	.-680    	; 0x10a <CSwitch>
     /* resume here when this task is rescheduled again later */
     Enable_Interrupt();
 3b2:	78 94       	sei
 3b4:	08 95       	ret

000003b6 <Ping>:
  * Added testing code for LEDs.
  */
void Ping() 
{
  int  x ;
  init_LED_D5();
 3b6:	08 df       	rcall	.-496    	; 0x1c8 <init_LED_D5>
  for(;;){
  	//LED on
	enable_LED(LED_D5_GREEN);
 3b8:	80 e4       	ldi	r24, 0x40	; 64
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0a df       	rcall	.-492    	; 0x1d2 <enable_LED>
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	9d e7       	ldi	r25, 0x7D	; 125
 3c2:	01 97       	sbiw	r24, 0x01	; 1
    for( x=0; x < 32000; ++x );   /* do nothing */
	for( x=0; x < 32000; ++x );   /* do nothing */
	for( x=0; x < 32000; ++x );   /* do nothing */

	//LED off
	disable_LEDs();  
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <Ping+0xc>
 3c6:	07 df       	rcall	.-498    	; 0x1d6 <disable_LEDs>
	  
    /* printf( "*" );  */
    Task_Next();
 3c8:	e4 df       	rcall	.-56     	; 0x392 <Task_Next>
 3ca:	f6 cf       	rjmp	.-20     	; 0x3b8 <Ping+0x2>

000003cc <Pong>:
  }
 3cc:	f8 de       	rcall	.-528    	; 0x1be <init_LED_D2>
{
  int  x;
  init_LED_D2();
  for(;;) {
	//LED on
	enable_LED(LED_D2_GREEN);
 3ce:	80 e2       	ldi	r24, 0x20	; 32
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	ff de       	rcall	.-514    	; 0x1d2 <enable_LED>
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	9d e7       	ldi	r25, 0x7D	; 125
 3d8:	01 97       	sbiw	r24, 0x01	; 1
    for( x=0; x < 32000; ++x );   /* do nothing */
	for( x=0; x < 32000; ++x );   /* do nothing */
	for( x=0; x < 32000; ++x );   /* do nothing */

	//LED off
	disable_LEDs();
 3da:	f1 f7       	brne	.-4      	; 0x3d8 <Pong+0xc>
 3dc:	fc de       	rcall	.-520    	; 0x1d6 <disable_LEDs>

    /* printf( "." );  */
    Task_Next();
 3de:	d9 df       	rcall	.-78     	; 0x392 <Task_Next>
 3e0:	f6 cf       	rjmp	.-20     	; 0x3ce <Pong+0x2>

000003e2 <main>:
	
  }
 3e2:	73 df       	rcall	.-282    	; 0x2ca <OS_Init>
  * will run forever.
  */
void main() 
{
   OS_Init();
   Task_Create( Pong );
 3e4:	86 ee       	ldi	r24, 0xE6	; 230
 3e6:	91 e0       	ldi	r25, 0x01	; 1
 3e8:	a6 df       	rcall	.-180    	; 0x336 <Task_Create>
   Task_Create( Ping );
 3ea:	8b ed       	ldi	r24, 0xDB	; 219
 3ec:	91 e0       	ldi	r25, 0x01	; 1
   OS_Start();
 3ee:	a3 df       	rcall	.-186    	; 0x336 <Task_Create>
 3f0:	8d cf       	rjmp	.-230    	; 0x30c <OS_Start>

000003f2 <_exit>:
 3f2:	f8 94       	cli

000003f4 <__stop_program>:
 3f4:	ff cf       	rjmp	.-2      	; 0x3f4 <__stop_program>
