
ex7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000414  00800200  00800200  0000043c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000046c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000004b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001020  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dbf  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000535  00000000  00000000  00002317  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  0000284c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066e  00000000  00000000  00002900  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000017c  00000000  00000000  00002f6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000030ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	26 e0       	ldi	r18, 0x06	; 6
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a4 31       	cpi	r26, 0x14	; 20
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	57 d1       	rcall	.+686    	; 0x3b4 <main>
 106:	5e c1       	rjmp	.+700    	; 0x3c4 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <CSwitch>:
  */
CSwitch:
        /* 
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
 10a:	0f 92       	push	r0
 10c:	1f 92       	push	r1
 10e:	2f 92       	push	r2
 110:	3f 92       	push	r3
 112:	4f 92       	push	r4
 114:	5f 92       	push	r5
 116:	6f 92       	push	r6
 118:	7f 92       	push	r7
 11a:	8f 92       	push	r8
 11c:	9f 92       	push	r9
 11e:	af 92       	push	r10
 120:	bf 92       	push	r11
 122:	cf 92       	push	r12
 124:	df 92       	push	r13
 126:	ef 92       	push	r14
 128:	ff 92       	push	r15
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	2f 93       	push	r18
 130:	3f 93       	push	r19
 132:	4f 93       	push	r20
 134:	5f 93       	push	r21
 136:	6f 93       	push	r22
 138:	7f 93       	push	r23
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	af 93       	push	r26
 140:	bf 93       	push	r27
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
 14a:	fc b7       	in	r31, 0x3c	; 60
 14c:	ff 93       	push	r31
 14e:	0f b7       	in	r16, 0x3f	; 63
 150:	0f 93       	push	r16
        /* 
          * Now, we have saved the CurrentP's context.
          * Save the current H/W stack pointer into CurrentP->sp.
          */
        lds  r30, CurrentP
 152:	e0 91 12 06 	lds	r30, 0x0612	; 0x800612 <CurrentP>
        lds  r31, CurrentP+1   /* Z = (R31,R30) contains the "sp" */
 156:	f0 91 13 06 	lds	r31, 0x0613	; 0x800613 <CurrentP+0x1>
        in   r28, SPL
 15a:	cd b7       	in	r28, 0x3d	; 61
        in   r29, SPH
 15c:	de b7       	in	r29, 0x3e	; 62
        st   Z+, r28       /* store (R28=SPL,R29=SPH) indirectly via Z */
 15e:	c1 93       	st	Z+, r28
        st   Z+, r29       /* Now, CurrentP->sp = the current H/W stack pointer */
 160:	d1 93       	st	Z+, r29

00000162 <Exit_Kernel>:
       /*
         * Now, we should select a new "CurrentP".
         */
Exit_Kernel:
        call Dispatch
 162:	5c d0       	rcall	.+184    	; 0x21c <Dispatch>
        /*
          * We are now ready to restore a new CurrentP's context, i.e.,
          * switching the H/W stack pointer to this new CurrentP->sp.
          */ 
        lds  r30, CurrentP
 164:	e0 91 12 06 	lds	r30, 0x0612	; 0x800612 <CurrentP>
        lds  r31, CurrentP+1  /* Z = (R31,R30) contains the new "sp" */
 168:	f0 91 13 06 	lds	r31, 0x0613	; 0x800613 <CurrentP+0x1>
        ld   r28, Z+
 16c:	c1 91       	ld	r28, Z+
        ld   r29, Z+
 16e:	d1 91       	ld	r29, Z+
        out  SPL, r28
 170:	cd bf       	out	0x3d, r28	; 61
        out  SPH, r29   /* Now, H/W stack pointer = CurrentP->sp */
 172:	de bf       	out	0x3e, r29	; 62
        /*
          * We are now executing in our new CurrentP's stack.
          * Note: at the bottom of the CurrentP's context is its return address.
          */
        RESTORECTX
 174:	ff 91       	pop	r31
 176:	ff bf       	out	0x3f, r31	; 63
 178:	ff 91       	pop	r31
 17a:	fc bf       	out	0x3c, r31	; 60
 17c:	ff 91       	pop	r31
 17e:	ef 91       	pop	r30
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	bf 91       	pop	r27
 186:	af 91       	pop	r26
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	7f 91       	pop	r23
 18e:	6f 91       	pop	r22
 190:	5f 91       	pop	r21
 192:	4f 91       	pop	r20
 194:	3f 91       	pop	r19
 196:	2f 91       	pop	r18
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	ff 90       	pop	r15
 19e:	ef 90       	pop	r14
 1a0:	df 90       	pop	r13
 1a2:	cf 90       	pop	r12
 1a4:	bf 90       	pop	r11
 1a6:	af 90       	pop	r10
 1a8:	9f 90       	pop	r9
 1aa:	8f 90       	pop	r8
 1ac:	7f 90       	pop	r7
 1ae:	6f 90       	pop	r6
 1b0:	5f 90       	pop	r5
 1b2:	4f 90       	pop	r4
 1b4:	3f 90       	pop	r3
 1b6:	2f 90       	pop	r2
 1b8:	1f 90       	pop	r1
 1ba:	0f 90       	pop	r0
        ret    /* don't use rti to re-enable interrupts */
 1bc:	08 95       	ret

000001be <Task_Terminate>:
/**
  * The calling task terminates itself.
  */
void Task_Terminate() 
{
   if (KernelActive) {
 1be:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <KernelActive>
 1c2:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <KernelActive+0x1>
 1c6:	89 2b       	or	r24, r25
 1c8:	49 f0       	breq	.+18     	; 0x1dc <Task_Terminate+0x1e>
      Disable_Interrupt();
 1ca:	f8 94       	cli
      CurrentP -> state = DEAD;
 1cc:	e0 91 12 06 	lds	r30, 0x0612	; 0x800612 <CurrentP>
 1d0:	f0 91 13 06 	lds	r31, 0x0613	; 0x800613 <CurrentP+0x1>
 1d4:	ee 5f       	subi	r30, 0xFE	; 254
 1d6:	fe 4f       	sbci	r31, 0xFE	; 254
 1d8:	10 82       	st	Z, r1
        /* we will NEVER return here! */
      asm ( "jmp Exit_Kernel":: );
 1da:	c3 cf       	rjmp	.-122    	; 0x162 <Exit_Kernel>
 1dc:	08 95       	ret

000001de <Kernel_Create_Task_At>:

   /*----BEGIN of NEW CODE----*/
   //Initialize the workspace (i.e., stack) and PD here!

   //Clear the contents of the workspace
   memset(&(p->workSpace),0,WORKSPACE);
 1de:	fc 01       	movw	r30, r24
 1e0:	32 96       	adiw	r30, 0x02	; 2
 1e2:	20 e0       	ldi	r18, 0x00	; 0
 1e4:	31 e0       	ldi	r19, 0x01	; 1
 1e6:	df 01       	movw	r26, r30
 1e8:	a9 01       	movw	r20, r18
 1ea:	1d 92       	st	X+, r1
 1ec:	41 50       	subi	r20, 0x01	; 1
 1ee:	50 40       	sbci	r21, 0x00	; 0
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <Kernel_Create_Task_At+0xc>
   //by most significant).  This is because the "return" assembly instructions 
   //(rtn and rti) pop addresses off in BIG ENDIAN (most sig. first, least sig. 
   //second), even though the AT90 is LITTLE ENDIAN machine.

   //Store terminate at the bottom of stack to protect against stack underrun.
   *(unsigned char *)sp-- = ((unsigned int)Task_Terminate) & 0xff;
 1f2:	e1 50       	subi	r30, 0x01	; 1
 1f4:	ff 4f       	sbci	r31, 0xFF	; 255
 1f6:	2f ed       	ldi	r18, 0xDF	; 223
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	20 83       	st	Z, r18
   *(unsigned char *)sp-- = (((unsigned int)Task_Terminate) >> 8) & 0xff;
 1fc:	31 97       	sbiw	r30, 0x01	; 1
 1fe:	30 83       	st	Z, r19

   //Place return address of function at bottom of stack
   *(unsigned char *)sp-- = ((unsigned int)f) & 0xff;
 200:	31 97       	sbiw	r30, 0x01	; 1
 202:	60 83       	st	Z, r22
   *(unsigned char *)sp-- = (((unsigned int)f) >> 8) & 0xff;
 204:	31 97       	sbiw	r30, 0x01	; 1
 206:	70 83       	st	Z, r23

   //Place stack pointer at top of stack
   sp = sp - 33;
 208:	9c 01       	movw	r18, r24
 20a:	24 52       	subi	r18, 0x24	; 36
 20c:	3f 4f       	sbci	r19, 0xFF	; 255
      
   p->sp = sp;		/* stack pointer into the "workSpace" */
 20e:	dc 01       	movw	r26, r24
 210:	2d 93       	st	X+, r18
 212:	3c 93       	st	X, r19

   /*----END of NEW CODE----*/



   p->state = READY;
 214:	34 96       	adiw	r30, 0x04	; 4
 216:	21 e0       	ldi	r18, 0x01	; 1
 218:	20 83       	st	Z, r18
 21a:	08 95       	ret

0000021c <Dispatch>:
void Dispatch()
{
     /* find the next READY task
       * Note: if there is no READY task, then this will loop forever!.
       */
   while(Process[NextP].state != READY) {
 21c:	23 e0       	ldi	r18, 0x03	; 3
 21e:	31 e0       	ldi	r19, 0x01	; 1
 220:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <NextP>
 224:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <NextP+0x1>
 228:	82 9f       	mul	r24, r18
 22a:	f0 01       	movw	r30, r0
 22c:	83 9f       	mul	r24, r19
 22e:	f0 0d       	add	r31, r0
 230:	92 9f       	mul	r25, r18
 232:	f0 0d       	add	r31, r0
 234:	11 24       	eor	r1, r1
 236:	e8 5f       	subi	r30, 0xF8	; 248
 238:	fc 4f       	sbci	r31, 0xFC	; 252
 23a:	80 81       	ld	r24, Z
 23c:	81 30       	cpi	r24, 0x01	; 1
 23e:	61 f0       	breq	.+24     	; 0x258 <Dispatch+0x3c>
      NextP = (NextP + 1) % MAXPROCESS;
 240:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <NextP>
 244:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <NextP+0x1>
 248:	01 96       	adiw	r24, 0x01	; 1
 24a:	83 70       	andi	r24, 0x03	; 3
 24c:	99 27       	eor	r25, r25
 24e:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <NextP+0x1>
 252:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <NextP>
 256:	e4 cf       	rjmp	.-56     	; 0x220 <Dispatch+0x4>
   }

     /* we have a new CurrentP */
   CurrentP = &(Process[NextP]);
 258:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <NextP>
 25c:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <NextP+0x1>
 260:	23 e0       	ldi	r18, 0x03	; 3
 262:	31 e0       	ldi	r19, 0x01	; 1
 264:	42 9f       	mul	r20, r18
 266:	c0 01       	movw	r24, r0
 268:	43 9f       	mul	r20, r19
 26a:	90 0d       	add	r25, r0
 26c:	52 9f       	mul	r21, r18
 26e:	90 0d       	add	r25, r0
 270:	11 24       	eor	r1, r1
 272:	8a 5f       	subi	r24, 0xFA	; 250
 274:	9d 4f       	sbci	r25, 0xFD	; 253
 276:	90 93 13 06 	sts	0x0613, r25	; 0x800613 <CurrentP+0x1>
 27a:	80 93 12 06 	sts	0x0612, r24	; 0x800612 <CurrentP>
   CurrentP->state = RUNNING;
 27e:	fc 01       	movw	r30, r24
 280:	ee 5f       	subi	r30, 0xFE	; 254
 282:	fe 4f       	sbci	r31, 0xFE	; 254
 284:	22 e0       	ldi	r18, 0x02	; 2
 286:	20 83       	st	Z, r18
 
   //Moved to bottom (this was in the wrong place).
   NextP = (NextP + 1) % MAXPROCESS;
 288:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <NextP>
 28c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <NextP+0x1>
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	83 70       	andi	r24, 0x03	; 3
 294:	99 27       	eor	r25, r25
 296:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <NextP+0x1>
 29a:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <NextP>
 29e:	08 95       	ret

000002a0 <OS_Init>:
  */
void OS_Init() 
{
   int x;

   Tasks = 0;
 2a0:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <_edata+0x1>
 2a4:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
   KernelActive = 0;
 2a8:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <KernelActive+0x1>
 2ac:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <KernelActive>
   NextP = 0;
 2b0:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <NextP+0x1>
 2b4:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <NextP>
 2b8:	e6 e0       	ldi	r30, 0x06	; 6
 2ba:	f2 e0       	ldi	r31, 0x02	; 2

   for (x = 0; x < MAXPROCESS; x++) {
      memset(&(Process[x]),0,sizeof(PD));
 2bc:	83 e0       	ldi	r24, 0x03	; 3
 2be:	91 e0       	ldi	r25, 0x01	; 1
 2c0:	df 01       	movw	r26, r30
 2c2:	9c 01       	movw	r18, r24
 2c4:	1d 92       	st	X+, r1
 2c6:	21 50       	subi	r18, 0x01	; 1
 2c8:	30 40       	sbci	r19, 0x00	; 0
 2ca:	e1 f7       	brne	.-8      	; 0x2c4 <OS_Init+0x24>
      Process[x].state = DEAD;
 2cc:	df 01       	movw	r26, r30
 2ce:	ae 5f       	subi	r26, 0xFE	; 254
 2d0:	be 4f       	sbci	r27, 0xFE	; 254
 2d2:	1c 92       	st	X, r1
 2d4:	ed 5f       	subi	r30, 0xFD	; 253
 2d6:	fe 4f       	sbci	r31, 0xFE	; 254

   Tasks = 0;
   KernelActive = 0;
   NextP = 0;

   for (x = 0; x < MAXPROCESS; x++) {
 2d8:	36 e0       	ldi	r19, 0x06	; 6
 2da:	e2 31       	cpi	r30, 0x12	; 18
 2dc:	f3 07       	cpc	r31, r19
 2de:	81 f7       	brne	.-32     	; 0x2c0 <OS_Init+0x20>
      memset(&(Process[x]),0,sizeof(PD));
      Process[x].state = DEAD;
   }
}
 2e0:	08 95       	ret

000002e2 <OS_Start>:
/**
  * This function starts the RTOS after creating a few tasks.
  */
void OS_Start() 
{   
   if ( (! KernelActive) && (Tasks > 0)) {
 2e2:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <KernelActive>
 2e6:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <KernelActive+0x1>
 2ea:	89 2b       	or	r24, r25
 2ec:	71 f4       	brne	.+28     	; 0x30a <OS_Start+0x28>
 2ee:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 2f2:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_edata+0x1>
 2f6:	89 2b       	or	r24, r25
 2f8:	41 f0       	breq	.+16     	; 0x30a <OS_Start+0x28>
      Disable_Interrupt();
 2fa:	f8 94       	cli

      /* here we go...  */
      KernelActive = 1;
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <KernelActive+0x1>
 304:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <KernelActive>
      asm ( "jmp Exit_Kernel":: );
 308:	2c cf       	rjmp	.-424    	; 0x162 <Exit_Kernel>
 30a:	08 95       	ret

0000030c <Task_Create>:
  * each task gives up its share of the processor voluntarily by calling
  * Task_Next().
  */
void Task_Create( voidfuncptr f)
{
   Disable_Interrupt();
 30c:	f8 94       	cli
  */
static void Kernel_Create_Task( voidfuncptr f ) 
{
   int x;

   if (Tasks == MAXPROCESS) return;  /* Too many task! */
 30e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <_edata>
 312:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <_edata+0x1>
 316:	24 30       	cpi	r18, 0x04	; 4
 318:	31 05       	cpc	r19, r1
 31a:	21 f1       	breq	.+72     	; 0x364 <Task_Create+0x58>
 31c:	e8 e0       	ldi	r30, 0x08	; 8
 31e:	f3 e0       	ldi	r31, 0x03	; 3
 320:	20 e0       	ldi	r18, 0x00	; 0
 322:	30 e0       	ldi	r19, 0x00	; 0

   /* find a DEAD PD that we can use  */
   for (x = 0; x < MAXPROCESS; x++) {
       if (Process[x].state == DEAD) break;
 324:	40 81       	ld	r20, Z
 326:	44 23       	and	r20, r20
 328:	39 f0       	breq	.+14     	; 0x338 <Task_Create+0x2c>
   int x;

   if (Tasks == MAXPROCESS) return;  /* Too many task! */

   /* find a DEAD PD that we can use  */
   for (x = 0; x < MAXPROCESS; x++) {
 32a:	2f 5f       	subi	r18, 0xFF	; 255
 32c:	3f 4f       	sbci	r19, 0xFF	; 255
 32e:	ed 5f       	subi	r30, 0xFD	; 253
 330:	fe 4f       	sbci	r31, 0xFE	; 254
 332:	24 30       	cpi	r18, 0x04	; 4
 334:	31 05       	cpc	r19, r1
 336:	b1 f7       	brne	.-20     	; 0x324 <Task_Create+0x18>
 338:	bc 01       	movw	r22, r24
       if (Process[x].state == DEAD) break;
   }

   ++Tasks;
 33a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 33e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_edata+0x1>
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <_edata+0x1>
 348:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
   Kernel_Create_Task_At( &(Process[x]), f );
 34c:	43 e0       	ldi	r20, 0x03	; 3
 34e:	51 e0       	ldi	r21, 0x01	; 1
 350:	24 9f       	mul	r18, r20
 352:	c0 01       	movw	r24, r0
 354:	25 9f       	mul	r18, r21
 356:	90 0d       	add	r25, r0
 358:	34 9f       	mul	r19, r20
 35a:	90 0d       	add	r25, r0
 35c:	11 24       	eor	r1, r1
 35e:	8a 5f       	subi	r24, 0xFA	; 250
 360:	9d 4f       	sbci	r25, 0xFD	; 253
 362:	3d df       	rcall	.-390    	; 0x1de <Kernel_Create_Task_At>
  */
void Task_Create( voidfuncptr f)
{
   Disable_Interrupt();
   Kernel_Create_Task( f );
   Enable_Interrupt();
 364:	78 94       	sei
 366:	08 95       	ret

00000368 <Task_Next>:
/**
  * The calling task gives up its share of the processor voluntarily.
  */
void Task_Next() 
{
   if (KernelActive) {
 368:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <KernelActive>
 36c:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <KernelActive+0x1>
 370:	89 2b       	or	r24, r25
 372:	59 f0       	breq	.+22     	; 0x38a <Task_Next+0x22>
     Disable_Interrupt();
 374:	f8 94       	cli
     CurrentP ->state = READY;
 376:	e0 91 12 06 	lds	r30, 0x0612	; 0x800612 <CurrentP>
 37a:	f0 91 13 06 	lds	r31, 0x0613	; 0x800613 <CurrentP+0x1>
 37e:	ee 5f       	subi	r30, 0xFE	; 254
 380:	fe 4f       	sbci	r31, 0xFE	; 254
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	80 83       	st	Z, r24
     CSwitch();
 386:	c1 de       	rcall	.-638    	; 0x10a <CSwitch>
     /* resume here when this task is rescheduled again later */
     Enable_Interrupt();
 388:	78 94       	sei
 38a:	08 95       	ret

0000038c <Ping>:
{
  int  x ;
  // DDRB = 0xff;
  for(;;){
  	//LED on
	PORTB = 0xff;
 38c:	cf ef       	ldi	r28, 0xFF	; 255
 38e:	c5 b9       	out	0x05, r28	; 5
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	9d e7       	ldi	r25, 0x7D	; 125
 394:	01 97       	sbiw	r24, 0x01	; 1

    for( x=0; x < 32000; ++x );   /* do nothing */
 396:	f1 f7       	brne	.-4      	; 0x394 <Ping+0x8>
	for( x=0; x < 32000; ++x );   /* do nothing */
	for( x=0; x < 32000; ++x );   /* do nothing */

	//LED off
	PORTB = 0x00;
 398:	15 b8       	out	0x05, r1	; 5
	  
    /* printf( "*" );  */
    Task_Next();
 39a:	e6 df       	rcall	.-52     	; 0x368 <Task_Next>
  }
 39c:	f8 cf       	rjmp	.-16     	; 0x38e <Ping+0x2>

0000039e <Pong>:
{
  int  x;
  // DDRL = 0xff;
  for(;;) {
	//LED on
	PORTL = 0xff;
 39e:	cf ef       	ldi	r28, 0xFF	; 255
 3a0:	c0 93 0b 01 	sts	0x010B, r28	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	9d e7       	ldi	r25, 0x7D	; 125
 3a8:	01 97       	sbiw	r24, 0x01	; 1

    for( x=0; x < 32000; ++x );   /* do nothing */
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <Pong+0xa>
	for( x=0; x < 32000; ++x );   /* do nothing */
	for( x=0; x < 32000; ++x );   /* do nothing */

	//LED off
	PORTL = 0x00;
 3ac:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>

    /* printf( "." );  */
    Task_Next();
 3b0:	db df       	rcall	.-74     	; 0x368 <Task_Next>
	
  }
 3b2:	f6 cf       	rjmp	.-20     	; 0x3a0 <Pong+0x2>

000003b4 <main>:
  * This function creates two cooperative tasks, "Ping" and "Pong". Both
  * will run forever.
  */
void main() 
{
   OS_Init();
 3b4:	75 df       	rcall	.-278    	; 0x2a0 <OS_Init>
   Task_Create( Pong );
 3b6:	8f ec       	ldi	r24, 0xCF	; 207
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	a8 df       	rcall	.-176    	; 0x30c <Task_Create>
   Task_Create( Ping );
 3bc:	86 ec       	ldi	r24, 0xC6	; 198
 3be:	91 e0       	ldi	r25, 0x01	; 1
   OS_Start();
 3c0:	a5 df       	rcall	.-182    	; 0x30c <Task_Create>
 3c2:	8f cf       	rjmp	.-226    	; 0x2e2 <OS_Start>

000003c4 <_exit>:
 3c4:	f8 94       	cli

000003c6 <__stop_program>:
 3c6:	ff cf       	rjmp	.-2      	; 0x3c6 <__stop_program>
